
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.11.0
 * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
 */
Prisma.prismaVersion = {
  client: "4.11.0",
  engine: "8fde8fef4033376662cad983758335009d522acb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ActivationsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  code: 'code',
  completed: 'completed',
  completed_at: 'completed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Activity_logScalarFieldEnum = makeEnum({
  id: 'id',
  log_name: 'log_name',
  description: 'description',
  subject_id: 'subject_id',
  subject_type: 'subject_type',
  causer_id: 'causer_id',
  causer_type: 'causer_type',
  properties: 'properties',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.AirlinesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  alias: 'alias',
  iata: 'iata',
  icao: 'icao',
  callsign: 'callsign',
  country: 'country',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Airport_servicesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  pickup_dropoff: 'pickup_dropoff',
  pickup_date_time: 'pickup_date_time',
  num_passengers: 'num_passengers',
  pickup_from: 'pickup_from',
  dropoff_location: 'dropoff_location',
  airline: 'airline',
  flight_number: 'flight_number',
  status: 'status',
  pick_up_lat: 'pick_up_lat',
  drop_off_lat: 'drop_off_lat',
  pick_up_lon: 'pick_up_lon',
  drop_off_lon: 'drop_off_lon',
  service_id: 'service_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.AirportsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  city: 'city',
  country: 'country',
  iata: 'iata',
  icao: 'icao',
  latitude: 'latitude',
  longitude: 'longitude',
  altitude: 'altitude',
  timezone: 'timezone',
  dst: 'dst',
  tz_database_time_zone: 'tz_database_time_zone',
  Type: 'Type',
  Source: 'Source',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Blog_categoriesScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
});

exports.Prisma.Blog_commentsScalarFieldEnum = makeEnum({
  id: 'id',
  blog_id: 'blog_id',
  name: 'name',
  email: 'email',
  website: 'website',
  comment: 'comment',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
});

exports.Prisma.BlogsScalarFieldEnum = makeEnum({
  id: 'id',
  blog_category_id: 'blog_category_id',
  user_id: 'user_id',
  title: 'title',
  slug: 'slug',
  content: 'content',
  image: 'image',
  views: 'views',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
});

exports.Prisma.Body_typesScalarFieldEnum = makeEnum({
  id: 'id',
  body_type: 'body_type',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Car_featuresScalarFieldEnum = makeEnum({
  id: 'id',
  car_id: 'car_id',
  feature_id: 'feature_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Car_price_typesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Car_pricesScalarFieldEnum = makeEnum({
  id: 'id',
  car_id: 'car_id',
  car_price_type_id: 'car_price_type_id',
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday',
  sunday: 'sunday',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.CarsScalarFieldEnum = makeEnum({
  id: 'id',
  body_type_id: 'body_type_id',
  transmission_id: 'transmission_id',
  manufacturer_id: 'manufacturer_id',
  driver_id: 'driver_id',
  fuel_id: 'fuel_id',
  vehicle_type_id: 'vehicle_type_id',
  car_model: 'car_model',
  name: 'name',
  qty: 'qty',
  passenger_seats: 'passenger_seats',
  maximum_luggage: 'maximum_luggage',
  total_doors: 'total_doors',
  child_seat: 'child_seat',
  image: 'image',
  status: 'status',
  per_mile_rate: 'per_mile_rate',
  hourly_rate: 'hourly_rate',
  minimum_fare: 'minimum_fare',
  minimum_hours: 'minimum_hours',
  fixed_price: 'fixed_price',
  is_slab_enabled: 'is_slab_enabled',
  is_loc_enabled: 'is_loc_enabled',
  created_at: 'created_at',
  updated_at: 'updated_at',
  isActive: 'isActive',
  car_type: 'car_type'
});

exports.Prisma.City_toursScalarFieldEnum = makeEnum({
  id: 'id',
  city_name: 'city_name',
  pick_up_location: 'pick_up_location',
  Created_on: 'Created_on'
});

exports.Prisma.CountriesScalarFieldEnum = makeEnum({
  id: 'id',
  sortname: 'sortname',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.CouponsScalarFieldEnum = makeEnum({
  id: 'id',
  coupon_name: 'coupon_name',
  percentage: 'percentage',
  price: 'price',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.DatatablesScalarFieldEnum = makeEnum({
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  points: 'points',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  age: 'age',
  job: 'job',
  gender: 'gender',
  country: 'country',
  sale_date: 'sale_date'
});

exports.Prisma.DriversScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.FeaturesScalarFieldEnum = makeEnum({
  id: 'id',
  feature: 'feature',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.FilesScalarFieldEnum = makeEnum({
  id: 'id',
  filename: 'filename',
  mime: 'mime',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Fuel_typesScalarFieldEnum = makeEnum({
  id: 'id',
  fuel_type: 'fuel_type',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.GratuitiesScalarFieldEnum = makeEnum({
  id: 'id',
  percentage: 'percentage',
  status: 'status',
  name: 'name',
  price: 'price',
  service_id: 'service_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Hourly_servicesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  pickup_location: 'pickup_location',
  pickup_date_time: 'pickup_date_time',
  num_passengers: 'num_passengers',
  num_service_hours: 'num_service_hours',
  dropoff_location: 'dropoff_location',
  add_another_stop: 'add_another_stop',
  additional_comments: 'additional_comments',
  status: 'status',
  service_id: 'service_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Location_exceptionsScalarFieldEnum = makeEnum({
  id: 'id',
  pick_up_loc_name: 'pick_up_loc_name',
  pick_up_postal_code: 'pick_up_postal_code',
  drop_off_loc_name: 'drop_off_loc_name',
  drop_off_postal_code: 'drop_off_postal_code',
  price: 'price',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.LocationsScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  pickup_location: 'pickup_location',
  pickup_lat: 'pickup_lat',
  pickup_lng: 'pickup_lng',
  dropoff_location: 'dropoff_location',
  dropoff_lat: 'dropoff_lat',
  dropoff_lng: 'dropoff_lng',
  fee: 'fee',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ManufacturersScalarFieldEnum = makeEnum({
  id: 'id',
  Manufacturer: 'Manufacturer',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.MigrationsScalarFieldEnum = makeEnum({
  id: 'id',
  migration: 'migration',
  batch: 'batch'
});

exports.Prisma.Package_serivceScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  passenger_capacity: 'passenger_capacity',
  price: 'price',
  created_at: 'created_at',
  updated_at: 'updated_at',
  car_id: 'car_id',
  isActive: 'isActive',
  pickup_location: 'pickup_location',
  pickup_lat: 'pickup_lat',
  pickup_lng: 'pickup_lng',
  dropoff_location: 'dropoff_location',
  dropoff_lat: 'dropoff_lat',
  dropoff_lng: 'dropoff_lng',
  luggage: 'luggage'
});

exports.Prisma.Package_typesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  password: 'password',
  Created_on: 'Created_on'
});

exports.Prisma.PersistencesScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  code: 'code',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Point_to_point_servicesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  pickup_location: 'pickup_location',
  pickup_date_time: 'pickup_date_time',
  num_passengers: 'num_passengers',
  dropoff_location: 'dropoff_location',
  add_another_stop: 'add_another_stop',
  additional_comments: 'additional_comments',
  status: 'status',
  pick_up_lat: 'pick_up_lat',
  pick_up_lon: 'pick_up_lon',
  drop_off_lat: 'drop_off_lat',
  drop_off_lon: 'drop_off_lon',
  service_id: 'service_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.RemindersScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  code: 'code',
  completed: 'completed',
  completed_at: 'completed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ReservationsScalarFieldEnum = makeEnum({
  id: 'id',
  order_number: 'order_number',
  service_id: 'service_id',
  car_id: 'car_id',
  pick_up_postal_code: 'pick_up_postal_code',
  pick_up_lat: 'pick_up_lat',
  pick_up_lon: 'pick_up_lon',
  pick_up_loc_name: 'pick_up_loc_name',
  drop_off_postal_code: 'drop_off_postal_code',
  drop_off_lat: 'drop_off_lat',
  drop_off_lon: 'drop_off_lon',
  drop_off_loc_name: 'drop_off_loc_name',
  pick_up_date: 'pick_up_date',
  price: 'price',
  tax: 'tax',
  airline: 'airline',
  flight_no: 'flight_no',
  no_of_hours: 'no_of_hours',
  maximum_passenger: 'maximum_passenger',
  maximum_luggage: 'maximum_luggage',
  customer_first_name: 'customer_first_name',
  customer_last_name: 'customer_last_name',
  customer_cnic: 'customer_cnic',
  customer_email: 'customer_email',
  customer_phone: 'customer_phone',
  created_at: 'created_at',
  updated_at: 'updated_at',
  uuid: 'uuid',
  payment_method: 'payment_method',
  isPaid: 'isPaid',
  special_instruction: 'special_instruction'
});

exports.Prisma.Role_usersScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  role_id: 'role_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.RolesScalarFieldEnum = makeEnum({
  id: 'id',
  slug: 'slug',
  name: 'name',
  permissions: 'permissions',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ServicesScalarFieldEnum = makeEnum({
  id: 'id',
  Name: 'Name',
  Status: 'Status',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.SlabsScalarFieldEnum = makeEnum({
  id: 'id',
  car_id: 'car_id',
  initial_distance: 'initial_distance',
  final_distance: 'final_distance',
  price: 'price',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.Sub_servicesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  pickup_location: 'pickup_location',
  pickup_lat: 'pickup_lat',
  pickup_lng: 'pickup_lng',
  dropoff_location: 'dropoff_location',
  dropoff_lat: 'dropoff_lat',
  dropoff_lng: 'dropoff_lng',
  price_per_passenger: 'price_per_passenger',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  isActive: 'isActive',
  car_id: 'car_id',
  service_id: 'service_id',
  description: 'description',
  luggage: 'luggage',
  passenger_capacity: 'passenger_capacity'
});

exports.Prisma.Sys_settingsScalarFieldEnum = makeEnum({
  id: 'id',
  sys_name: 'sys_name',
  sys_details: 'sys_details',
  Created_on: 'Created_on',
  setting_key: 'setting_key'
});

exports.Prisma.Taggable_tagsScalarFieldEnum = makeEnum({
  tag_id: 'tag_id',
  name: 'name',
  normalized: 'normalized',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.TasksScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  finished: 'finished',
  task_description: 'task_description',
  task_deadline: 'task_deadline',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ThrottleScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  type: 'type',
  ip: 'ip',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.TimeslotsScalarFieldEnum = makeEnum({
  id: 'id',
  time: 'time',
  isActive: 'isActive',
  sub_service_id: 'sub_service_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ToursScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  pickup_location: 'pickup_location',
  pickup_lat: 'pickup_lat',
  pickup_lng: 'pickup_lng',
  dropoff_location: 'dropoff_location',
  dropoff_lat: 'dropoff_lat',
  dropoff_lng: 'dropoff_lng',
  price_per_passenger: 'price_per_passenger',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  isActive: 'isActive',
  car_id: 'car_id',
  description: 'description',
  luggage: 'luggage'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TransmissionsScalarFieldEnum = makeEnum({
  id: 'id',
  transmission: 'transmission',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  password: 'password',
  permissions: 'permissions',
  last_login: 'last_login',
  first_name: 'first_name',
  last_name: 'last_name',
  bio: 'bio',
  gender: 'gender',
  dob: 'dob',
  pic: 'pic',
  country: 'country',
  state: 'state',
  city: 'city',
  address: 'address',
  postal: 'postal',
  status: 'status',
  reset_token: 'reset_token',
  token_expired_at: 'token_expired_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
});

exports.Prisma.Vehicle_typesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
});
exports.cars_car_type = makeEnum({
  Other: 'Other',
  Tour: 'Tour',
  Package: 'Package'
});

exports.Prisma.ModelName = makeEnum({
  activations: 'activations',
  activity_log: 'activity_log',
  airlines: 'airlines',
  airport_services: 'airport_services',
  airports: 'airports',
  blog_categories: 'blog_categories',
  blog_comments: 'blog_comments',
  blogs: 'blogs',
  body_types: 'body_types',
  car_features: 'car_features',
  car_price_types: 'car_price_types',
  car_prices: 'car_prices',
  cars: 'cars',
  city_tours: 'city_tours',
  countries: 'countries',
  coupons: 'coupons',
  datatables: 'datatables',
  drivers: 'drivers',
  features: 'features',
  files: 'files',
  fuel_types: 'fuel_types',
  gratuities: 'gratuities',
  hourly_services: 'hourly_services',
  locations: 'locations',
  manufacturers: 'manufacturers',
  migrations: 'migrations',
  package_types: 'package_types',
  persistences: 'persistences',
  point_to_point_services: 'point_to_point_services',
  reminders: 'reminders',
  reservations: 'reservations',
  role_users: 'role_users',
  roles: 'roles',
  services: 'services',
  sys_settings: 'sys_settings',
  taggable_tags: 'taggable_tags',
  tasks: 'tasks',
  throttle: 'throttle',
  tours: 'tours',
  transmissions: 'transmissions',
  users: 'users',
  location_exceptions: 'location_exceptions',
  package_serivce: 'package_serivce',
  slabs: 'slabs',
  timeslots: 'timeslots',
  vehicle_types: 'vehicle_types',
  sub_services: 'sub_services'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
